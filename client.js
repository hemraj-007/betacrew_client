// I-am-autogenerated

import net from "net";
import { parsePacket, writeToJSON } from "./utils.js";
import { requestMissingPackets } from "./packetHandler.js";
import { log } from "./logger.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const configPath = path.join(__dirname, "config.json");
const config = JSON.parse(fs.readFileSync(configPath));

const { serverHost, serverPort } = config;

let buffer = Buffer.alloc(0);
const receivedPackets = [];

const client = net.createConnection({ host: serverHost, port: serverPort }, () => {
  log("INFO", "Connected to server");

  const requestBuffer = Buffer.alloc(2);
  requestBuffer.writeUInt8(1, 0);
  requestBuffer.writeUInt8(0, 1);

  client.write(requestBuffer);
});

client.on("data", (data) => {
  buffer = Buffer.concat([buffer, data]);

  while (buffer.length >= 17) {
    const packet = parsePacket(buffer.slice(0, 17));
    if (packet) {
      receivedPackets.push(packet);
    }
    buffer = buffer.slice(17);
  }
});

client.on("end", () => {
  log("INFO", "Stream complete. Checking for missing sequences...");

  const missingSequences = identifyMissingSequences(receivedPackets);
  log("INFO", "Missing Sequences", { missingSequences });

  if (missingSequences.length > 0) {
    requestMissingPackets(missingSequences, receivedPackets);
  } else {
    writeToJSON(receivedPackets);
  }
});

client.on("error", (err) => {
  log("ERROR", "Connection error", { error: err.message });
});

/**
 * Identifies missing sequences
 */
function identifyMissingSequences(packets) {
  const sequences = packets.map((p) => p.sequence).sort((a, b) => a - b);
  const maxSequence = Math.max(...sequences);
  const missing = [];

  for (let i = 1; i <= maxSequence; i++) {
    if (!sequences.includes(i)) {
      missing.push(i);
    }
  }

  return missing;
}
