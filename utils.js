// I-am-autogenerated

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { log } from "./logger.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const outputFilePath = path.join(__dirname, "data", "output.json");

/**
 * Writes data to the output JSON file.
 * @param {Array} packets - Array of packets to be written
 */
export function writeToJSON(packets) {
  packets.sort((a, b) => a.sequence - b.sequence);
  try {
    fs.writeFileSync(outputFilePath, JSON.stringify(packets, null, 2));
    log("INFO", `Data successfully written to ${outputFilePath}`);
  } catch (err) {
    log("ERROR", "Error writing to JSON file", { error: err.message });
  }
}

/**
 * Parses a packet of 17 bytes and returns an object
 * @param {Buffer} buffer - 17 bytes buffer
 */
export function parsePacket(buffer) {
  try {
    if (buffer.length !== 17) {
      throw new Error("Invalid packet length");
    }

    const symbol = buffer.slice(0, 4).toString("ascii").trim();
    const indicator = buffer.slice(4, 5).toString("ascii");
    const quantity = buffer.readInt32BE(5);
    const price = buffer.readInt32BE(9);
    const sequence = buffer.readInt32BE(13);

    if (!symbol || !["B", "S"].includes(indicator) || isNaN(quantity) || isNaN(price) || isNaN(sequence)) {
      throw new Error("Packet validation failed");
    }

    return { symbol, indicator, quantity, price, sequence };
  } catch (err) {
    log("ERROR", "Error parsing packet", { error: err.message });
    return null;  // Return null for invalid packets
  }
}
